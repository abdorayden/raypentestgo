package main

import (
	"log"
	"os"
	"fmt"
	"net/http"
	"net/http/httputil"
	"net/url"
)

const FileName  = ".rayhttprequest"

func InitFileRequest(FilePath string) (*os.File , error) {
	file , err := os.Create(FilePath)
	if err != nil {
		return nil , err
	}else {
		return file , nil
	}
}

func WriteFileRequest(file *os.File , req *http.Request){
	fmt.Println("Request Headers:")
	for key, values := range req.Header {
		for _, value := range values {
			file.WriteString(fmt.Sprintf("\t%s : %s\n", key, value))
		}
	}

	// Log the cookies from the incoming request
	fmt.Println("Request Cookies:")
	for _, cookie := range req.Cookies() {
		file.WriteString(fmt.Sprintf("\t%s : %s\n", cookie.Name, cookie.Value))
	}
	file.WriteString(";\n");
}

func main() {
	// getting home directory to init request file 
	homeDir, err := os.UserHomeDir()
	if err != nil {
		fmt.Println("Error getting home directory:", err)
		return
	}
	var target string
	fmt.Print("choose target : ")
	fmt.Scanf("%s" , &target)

	file , err := InitFileRequest(fmt.Sprintf("%s/%s" , homeDir , FileName))
	if err != nil{
		log.Fatalf("could not init file %s : %s" , fmt.Sprintf("%s/%s" , homeDir , FileName), err)
	}

	// Parse the target URL.
	parsedURL, err := url.Parse(target)
	if err != nil {
		log.Fatalf("Failed to parse target URL: %v", err)
	}

	// Create a new reverse proxy.
	proxy := httputil.NewSingleHostReverseProxy(parsedURL)

	// Handle incoming HTTP requests by forwarding them to the proxy.
	fmt.Println("-------------------------------------------------------------------")
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		// Log the incoming request method and URL
		fmt.Printf("Proxying request: %s %s\n", r.Method, r.URL)
		WriteFileRequest(file, r)

		// Log the headers of the incoming request
		//fmt.Println("Request Headers:")
		//for key, values := range r.Header {
		//	for _, value := range values {
		//		fmt.Printf("\t%s |:| %s\n", key, value)
		//	}
		//}

		//// Log the cookies from the incoming request
		//fmt.Println("Request Cookies:")
		//for _, cookie := range r.Cookies() {
		//	fmt.Printf("\tName: %s |:| Value: %s\n", cookie.Name, cookie.Value)
		//}
		//fmt.Println("-------------------------------------------------------------------")
		// Forward the request to the proxy server
		proxy.ServeHTTP(w, r)
	})

	// Start the proxy server.
	port := ":8080"
	log.Printf("Starting proxy server on %s...", port)
	if err := http.ListenAndServe(port, nil); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

